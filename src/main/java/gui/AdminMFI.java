/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Daniel
 */
public class AdminMFI extends javax.swing.JFrame {

    /**
     * Creates new form AdminMFI
     */
    public AdminMFI() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        TableMFI.getTableHeader().setFont(new Font("Poppins", Font.BOLD, 20));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableMFI = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        comboBoxItemCa = new javax.swing.JComboBox<>();
        txtItemName = new javax.swing.JTextField();
        txtItemPrice = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        javax.swing.JButton btnDeleteItem = new javax.swing.JButton();
        btnAddItem = new javax.swing.JButton();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        btnSaveRecord = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1010, 580));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(216, 65, 65));
        jPanel1.setPreferredSize(new java.awt.Dimension(1002, 576));
        jPanel1.setLayout(null);

        TableMFI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Price (RM)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableMFI.setToolTipText("Modify Food Items Table");
        jScrollPane1.setViewportView(TableMFI);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(40, 110, 409, 400);

        jButton8.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jButton8.setText("BACK");
        jButton8.setPreferredSize(new java.awt.Dimension(1000, 573));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8);
        jButton8.setBounds(850, 30, 80, 40);

        jLabel2.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MODIFY FOOD ITEMS");
        jLabel2.setToolTipText("MODIFY FOOD ITEMS TEXT");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel2);
        jLabel2.setBounds(80, 50, 310, 37);

        jPanel2.setBackground(new java.awt.Color(255, 102, 102));

        comboBoxItemCa.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        comboBoxItemCa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<SELECT>", "Foods", "Drinks", "Desserts", "Snacks" }));
        comboBoxItemCa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxItemCaActionPerformed(evt);
            }
        });

        txtItemName.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        txtItemName.setToolTipText("Set Item Name Here:");
        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });

        txtItemPrice.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        txtItemPrice.setToolTipText("Set Item Price Here");

        btnClear.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnClear.setText("Clear");
        btnClear.setToolTipText("Clear Items");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDeleteItem.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        btnDeleteItem.setText("-");
        btnDeleteItem.setToolTipText("Delete Item");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        btnAddItem.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnAddItem.setText("+");
        btnAddItem.setToolTipText("Add Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Item Name:");

        jLabel4.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Item Price:");

        jLabel5.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Item Category:");

        btnSaveRecord.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        btnSaveRecord.setText("Save Record ");
        btnSaveRecord.setToolTipText("");
        btnSaveRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveRecordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3)
                        .addGap(23, 23, 23)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtItemName)
                    .addComponent(txtItemPrice)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnDeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSaveRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxItemCa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBoxItemCa, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel3)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(txtItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel4)))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(btnSaveRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(510, 110, 450, 400);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1010, 580);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:

        Register rg = new Register();
        rg.setVisible(true);
        rg.pack();
        rg.setLocationRelativeTo(null);
        rg.setDefaultCloseOperation(Register.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        AdminMenu am = new AdminMenu();
        am.show(); //display second frame

        dispose(); //close current frame (JAGuiDisplay)
    }//GEN-LAST:event_jButton8ActionPerformed

    private void comboBoxItemCaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxItemCaActionPerformed
        // TODO add your handling code here:
          String selectedValue = comboBoxItemCa.getSelectedItem().toString();
        if (selectedValue.equals("Foods")) { 
            String filePath = "C:\\Users\\danie\\Documents\\NetBeansProjects\\JavaAssignment\\db\\Foods.txt";
            File file = new File(filePath);
        
            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);

                DefaultTableModel model = (DefaultTableModel)TableMFI.getModel();
                JTableHeader header = TableMFI.getTableHeader();
                header.setFont(new Font("Poppins", Font.BOLD, 20));
                header.setForeground(Color.BLACK);
                model.setRowCount(0);
                Object[] lines = br.lines().toArray();

                for(int i = 0; i < lines.length; i++){
                    String[] row = lines[i].toString().split(" ");
                    model.addRow(row);
                }

            } catch (FileNotFoundException ex) {
                System.out.println("Your Data Has Not Saved. Error Found!");
            }
        
        
        } else if (selectedValue.equals("Drinks")){
            String filePath = "C:\\Users\\danie\\Documents\\NetBeansProjects\\JavaAssignment\\db\\Drinks.txt";
            File file = new File(filePath);

            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);

                DefaultTableModel model = (DefaultTableModel)TableMFI.getModel();
                JTableHeader header = TableMFI.getTableHeader();
                header.setFont(new Font("Poppins", Font.BOLD, 20));
                header.setForeground(Color.BLACK);
                model.setRowCount(0);
                Object[] lines = br.lines().toArray();

                for(int i = 0; i < lines.length; i++){
                    String[] row = lines[i].toString().split(" ");
                    model.addRow(row);
                }

            } catch (FileNotFoundException ex) {
                System.out.println("Your Data Has Not Saved. Error Found!");
            }
        
        } else if (selectedValue.equals("Desserts")){
            String filePath = "C:\\Users\\danie\\Documents\\NetBeansProjects\\JavaAssignment\\db\\Desserts.txt";
            File file = new File(filePath);

            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);

                DefaultTableModel model = (DefaultTableModel)TableMFI.getModel();
                JTableHeader header = TableMFI.getTableHeader();
                header.setFont(new Font("Poppins", Font.BOLD, 20));
                header.setForeground(Color.BLACK);
                model.setRowCount(0);
                Object[] lines = br.lines().toArray();

                for(int i = 0; i < lines.length; i++){
                    String[] row = lines[i].toString().split(" ");
                    model.addRow(row);
                }

            } catch (FileNotFoundException ex) {
                System.out.println("Your Data Has Not Saved. Error Found!");
            }

        }   else if (selectedValue.equals("Snacks")){
            String filePath = "C:\\Users\\danie\\Documents\\NetBeansProjects\\JavaAssignment\\db\\Snacks.txt";
            File file = new File(filePath);

            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);

                DefaultTableModel model = (DefaultTableModel)TableMFI.getModel();
                JTableHeader header = TableMFI.getTableHeader();
                header.setFont(new Font("Poppins", Font.BOLD, 20));
                header.setForeground(Color.BLACK);
                model.setRowCount(0);
                Object[] lines = br.lines().toArray();

                for(int i = 0; i < lines.length; i++){
                    String[] row = lines[i].toString().split(" ");
                    model.addRow(row);
                }

            } catch (FileNotFoundException ex) {
                System.out.println("Your Data Has Not Saved. Error Found!");
            }

        }  
    }//GEN-LAST:event_comboBoxItemCaActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model= (DefaultTableModel) TableMFI.getModel();
        model.setRowCount(0);

    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        int row = TableMFI.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(this,
                "No row is selected! Please select one row",
                "Select row",
                JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) TableMFI.getModel();
            model.removeRow(row);
        }
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnSaveRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveRecordActionPerformed
      String selectedValue = comboBoxItemCa.getSelectedItem().toString();
        if (selectedValue.equals("Foods")) { 
            String filePath = "C:\\Users\\danie\\Documents\\NetBeansProjects\\JavaAssignment\\db\\Foods.txt";
            File file = new File(filePath);
        
            try {
                FileWriter fw = new FileWriter(file);
                BufferedWriter bw = new BufferedWriter(fw);
            
            for(int i = 0; i < TableMFI.getRowCount(); i++){//rows
                for(int j = 0; j < TableMFI.getColumnCount(); j++){//columns
                    bw.write(TableMFI.getValueAt(i, j)+" ");
                    
                }
                bw.newLine();
            }
            
            bw.close();
            fw.close();
            
            JOptionPane.showMessageDialog(this,"Data has been Succesfully saved!","Success",JOptionPane.PLAIN_MESSAGE);
            
            } catch (IOException ex) {
                System.out.println("Your Data Has Not Saved. Error Found!");
            }
         
        } else if (selectedValue.equals("Drinks")){  
            String filePath = "C:\\Users\\danie\\Documents\\NetBeansProjects\\JavaAssignment\\db\\Drinks.txt";
            File file = new File(filePath);
        
            try {
                FileWriter fw = new FileWriter(file);
                BufferedWriter bw = new BufferedWriter(fw);
            
            for(int i = 0; i < TableMFI.getRowCount(); i++){//rows
                for(int j = 0; j < TableMFI.getColumnCount(); j++){//columns
                    bw.write(TableMFI.getValueAt(i, j)+" ");
                    
                }
                bw.newLine();
            }
            
            bw.close();
            fw.close();
            
            JOptionPane.showMessageDialog(this,"Data has been Succesfully saved!","Success",JOptionPane.PLAIN_MESSAGE);
            
            } catch (IOException ex) {
                System.out.println("Your Data Has Not Saved. Error Found!");
            }
            
        } else if (selectedValue.equals("Desserts")){  
            String filePath = "C:\\Users\\danie\\Documents\\NetBeansProjects\\JavaAssignment\\db\\Desserts.txt";
            File file = new File(filePath);
        
            try {
                FileWriter fw = new FileWriter(file);
                BufferedWriter bw = new BufferedWriter(fw);
            
            for(int i = 0; i < TableMFI.getRowCount(); i++){//rows
                for(int j = 0; j < TableMFI.getColumnCount(); j++){//columns
                    bw.write(TableMFI.getValueAt(i, j)+" ");
                    
                }
                bw.newLine();
            }
            
            bw.close();
            fw.close();
            
            JOptionPane.showMessageDialog(this,"Data has been Succesfully saved!","Success",JOptionPane.PLAIN_MESSAGE);
            
            } catch (IOException ex) {
                System.out.println("Your Data Has Not Saved. Error Found!");
            }
         } else if (selectedValue.equals("Snacks")){  
            String filePath = "C:\\Users\\danie\\Documents\\NetBeansProjects\\JavaAssignment\\db\\Snacks.txt";
            File file = new File(filePath);
        
            try {
                FileWriter fw = new FileWriter(file);
                BufferedWriter bw = new BufferedWriter(fw);
            
            for(int i = 0; i < TableMFI.getRowCount(); i++){//rows
                for(int j = 0; j < TableMFI.getColumnCount(); j++){//columns
                    bw.write(TableMFI.getValueAt(i, j)+" ");
                    
                }
                bw.newLine();
            }
            
            bw.close();
            fw.close();
            
            JOptionPane.showMessageDialog(this,"Data has been Succesfully saved!","Success",JOptionPane.PLAIN_MESSAGE);
            
            } catch (IOException ex) {
                System.out.println("Your Data Has Not Saved. Error Found!");
            } 
        }   else if (selectedValue.equals("<SELECT>")){  

            JOptionPane.showMessageDialog(this,
                                    "Please Select A Food Category!",
                                    "Modify Food Items",
                                    JOptionPane.ERROR_MESSAGE);
            } else{
            JOptionPane.showMessageDialog(this,
                                    "Your Data are Empty! Please try again.",
                                    "Modify Food Items",
                                    JOptionPane.ERROR_MESSAGE);
                
            } 

    }//GEN-LAST:event_btnSaveRecordActionPerformed
    
    
    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        // TODO add your handling code here:
        
        String ItemName = txtItemName.getText();
        String ItemPrice = txtItemPrice.getText();
        
        if (ItemName.isEmpty() || ItemPrice.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                                    "Your input fields are empty! Please try again.",
                                    "Modify Food Items",
                                    JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) TableMFI.getModel();
            model.addRow(new Object[]{ItemName, ItemPrice});
            
            txtItemName.setText("");
            txtItemPrice.setText("");
        }
          
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminMFI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminMFI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminMFI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminMFI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminMFI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableMFI;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSaveRecord;
    private javax.swing.JComboBox<String> comboBoxItemCa;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtItemPrice;
    // End of variables declaration//GEN-END:variables
}
